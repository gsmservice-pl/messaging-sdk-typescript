/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { incomingList } from "../../funcs/incomingList.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.ListIncomingMessagesRequest$inboundSchema,
};

export const tool$incomingList: ToolDefinition<typeof args> = {
  name: "incoming-list",
  description: `List the received SMS messages

Get the details of all received messages from your account incoming messages box. This method supports pagination so you have to pass \`ListIncomingMessagesRequest\` object with property \`page\` (number of page with received messages which you want to access) and a \`limit\` (max of received messages per page). Messages are fetched from the latest one. This method will accept maximum **50** as \`limit\` parameter value.

As a successful result a \`ListIncomingMessagesResponse\` object will be returned with an array of \`IncomingMessage\` as \`result\` property, each object per single received message. \`ListIncomingMessagesResponse\` object will contain also a \`headers\` array property where you can find \`X-Total-Results\` (a total count of all received messages which are available in incoming box on your account), \`X-Total-Pages\` (a total number of all pages with results), \`X-Current-Page\` (A current page number) and \`X-Limit\` (messages count per single page) elements.`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await incomingList(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value.result;

    return formatResult(value, apiCall);
  },
};
