/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { outgoingCancelScheduled } from "../../funcs/outgoingCancelScheduled.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.CancelMessagesRequest$inboundSchema,
};

export const tool$outgoingCancelScheduled: ToolDefinition<typeof args> = {
  name: "outgoing-cancel-scheduled",
  description: `Cancel a scheduled messages

Cancel messages using their \`ids\` which were scheduled to be sent at a specific time. You have to pass a \`CancelMessagesRequest\` object containing as \`ids\` property an \`array\` of the unique message IDs, which were returned after sending a message. This method will accept maximum 50 identifiers in one call. You can cancel only messages with *SCHEDULED* status.
 
As a successful result a \`CancelMessagesResponse\` object will be returned, with \`result\` property containing array of \`CancelledMessage\` object. The \`status\` property of each \`CancelledMessage\` object will contain a status code of operation - \`204\` if a particular message was cancelled successfully and other code if an error occured.
 
\`CancelMessagesResponse\` object will also contain \`headers\` array property where you can find \`X-Success-Count\` (a count of messages which were cancelled successfully), \`X-Error-Count\` (count of messages which were not cancelled) and \`X-Sandbox\` (if a request was made in Sandbox or Production system) elements.`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await outgoingCancelScheduled(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value.result;

    return formatResult(value, apiCall);
  },
};
