/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { messagesGetByIds } from "../../funcs/messagesGetByIds.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.GetMessagesRequest$inboundSchema,
};

export const tool$messagesGetByIds: ToolDefinition<typeof args> = {
  name: "messages-get-by-ids",
  description: `Get the messages details and status by IDs

Check the current status and details of one or more messages using their \`ids\`. You have to pass a \`GetMessagesRequest\` object with \`ids\` property, containing an \`array\` with unique message *IDs* which details you want to fetch. This method will accept maximum 50 identifiers in one call.

As a successful result a \`GetMessagesResponse\` object will be returned containing \`result\` property with an \`array\` of \`Message\` objects, each object per single found message. \`GetMessagesResponse\` object will also contain \`headers\` array property where you can find \`X-Success-Count\` (a count of messages which were found and returned correctly) and \`X-Error-Count\` (count of messages which were not found) elements.`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await messagesGetByIds(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value.result;

    return formatResult(value, apiCall);
  },
};
