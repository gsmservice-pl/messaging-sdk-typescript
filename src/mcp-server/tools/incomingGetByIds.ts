/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { incomingGetByIds } from "../../funcs/incomingGetByIds.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.GetIncomingMessagesRequest$inboundSchema,
};

export const tool$incomingGetByIds: ToolDefinition<typeof args> = {
  name: "incoming_get-by-ids",
  description: `Get the incoming messages by IDs

Get the details of one or more received messages using their \`ids\`. This method accepts a \`GetIncomingMessagesRequest\` object with \`ids\` property containing an \`array\` of the unique incoming message *IDs*, which were given while receiving a messages. The method will accept maximum 50 identifiers in one call.

As a successful result a \`GetIncomingMessagesResponse\` object will be returned with a \`result\` property containing array of \`IncomingMessage\` objects, each object per single received message. \`GetIncomingMessagesResponse\` object will contain also a \`headers\` array property where you can find \`X-Success-Count\` (a count of incoming messages which were found and returned correctly) and \`X-Error-Count\` (count of incoming messages which were not found) elements.`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await incomingGetByIds(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value.result;

    return formatResult(value, apiCall);
  },
};
