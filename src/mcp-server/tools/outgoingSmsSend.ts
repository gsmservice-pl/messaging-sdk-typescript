/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { outgoingSmsSend } from "../../funcs/outgoingSmsSend.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.SendSmsRequestBody$inboundSchema,
};

export const tool$outgoingSmsSend: ToolDefinition<typeof args> = {
  name: "outgoing-sms_send",
  description: `Send SMS Messages

Send single or multiple SMS messages at the same time. You can pass as a parameter \`SmsMessage\` object (for single message) or \`array\` of \`SmsMessage\` objects (for multiple messages). Each \`SmsMessage\` object has several properties, describing message parameters such recipient phone number, content of the message, type or scheduled sending date, etc. This method will accept maximum **100** messages in one call.

As a successful result a \`SendSmsResponse\` object will be returned with \`result\` property containing array of \`Message\` objects, one object per each single message. You should check the \`statusCode\` property of each \`Message\` object to make sure which were accepted by gateway (queued) and which were rejected. In case of rejection, \`statusDescription\` property will include a reason.

\`SendSmsResponse\` will also include \`headers\` array with \`X-Success-Count\` (a count of messages which were processed successfully), \`X-Error-Count\` (count of messages which were rejected) and \`X-Sandbox\` (if a request was made in Sandbox or Production system) elements.`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await outgoingSmsSend(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value.result;

    return formatResult(value, apiCall);
  },
};
