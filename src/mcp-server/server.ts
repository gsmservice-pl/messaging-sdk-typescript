/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { ClientCore } from "../core.js";
import { SDKOptions } from "../lib/config.js";
import type { ConsoleLogger } from "./console-logger.js";
import { createRegisterPrompt } from "./prompts.js";
import {
  createRegisterResource,
  createRegisterResourceTemplate,
} from "./resources.js";
import { MCPScope } from "./scopes.js";
import { createRegisterTool } from "./tools.js";
import { tool$accountsGet } from "./tools/accountsGet.js";
import { tool$accountsGetSubaccount } from "./tools/accountsGetSubaccount.js";
import { tool$commonPing } from "./tools/commonPing.js";
import { tool$incomingGetByIds } from "./tools/incomingGetByIds.js";
import { tool$incomingList } from "./tools/incomingList.js";
import { tool$outgoingCancelScheduled } from "./tools/outgoingCancelScheduled.js";
import { tool$outgoingGetByIds } from "./tools/outgoingGetByIds.js";
import { tool$outgoingList } from "./tools/outgoingList.js";
import { tool$outgoingMmsGetPrice } from "./tools/outgoingMmsGetPrice.js";
import { tool$outgoingMmsSend } from "./tools/outgoingMmsSend.js";
import { tool$outgoingSmsGetPrice } from "./tools/outgoingSmsGetPrice.js";
import { tool$outgoingSmsSend } from "./tools/outgoingSmsSend.js";
import { tool$sendersAdd } from "./tools/sendersAdd.js";
import { tool$sendersDelete } from "./tools/sendersDelete.js";
import { tool$sendersList } from "./tools/sendersList.js";
import { tool$sendersSetDefault } from "./tools/sendersSetDefault.js";

export function createMCPServer(deps: {
  logger: ConsoleLogger;
  allowedTools?: string[] | undefined;
  scopes?: MCPScope[] | undefined;
  serverURL?: string | undefined;
  bearer?: SDKOptions["bearer"] | undefined;
  server?: SDKOptions["server"] | undefined;
}) {
  const server = new McpServer({
    name: "Client",
    version: "3.9.48",
  });

  const client = new ClientCore({
    bearer: deps.bearer,
    serverURL: deps.serverURL,
    server: deps.server,
  });

  const scopes = new Set(deps.scopes);

  const allowedTools = deps.allowedTools && new Set(deps.allowedTools);
  const tool = createRegisterTool(
    deps.logger,
    server,
    client,
    scopes,
    allowedTools,
  );
  const resource = createRegisterResource(deps.logger, server, client, scopes);
  const resourceTemplate = createRegisterResourceTemplate(
    deps.logger,
    server,
    client,
    scopes,
  );
  const prompt = createRegisterPrompt(deps.logger, server, client, scopes);
  const register = { tool, resource, resourceTemplate, prompt };
  void register; // suppress unused warnings

  tool(tool$accountsGet);
  tool(tool$accountsGetSubaccount);
  tool(tool$outgoingGetByIds);
  tool(tool$outgoingCancelScheduled);
  tool(tool$outgoingList);
  tool(tool$incomingList);
  tool(tool$incomingGetByIds);
  tool(tool$commonPing);
  tool(tool$sendersList);
  tool(tool$sendersAdd);
  tool(tool$sendersDelete);
  tool(tool$sendersSetDefault);
  tool(tool$outgoingMmsGetPrice);
  tool(tool$outgoingMmsSend);
  tool(tool$outgoingSmsGetPrice);
  tool(tool$outgoingSmsSend);

  return server;
}
