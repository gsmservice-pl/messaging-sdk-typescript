/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  MessageType,
  MessageType$inboundSchema,
  MessageType$outboundSchema,
} from "./messagetype.js";

/**
 * An object defining the properties of a single message
 */
export type Message = {
  /**
   * Unique message identifier
   */
  id?: number | null | undefined;
  /**
   * Custom message ID assigned by the User
   */
  cid?: string | null | undefined;
  /**
   * Message type (SmsType.SmsPro -> SMS PRO, SmsType.SmsEco -> SMS ECO, SmsType.SmsTwoWay ->SMS 2WAY, SmsType.Mms -> MMS)
   */
  type?: MessageType | undefined;
  /**
   * A telephone number in international format (with a plus sign and the country code at the beginning, e.g. +48 for Poland)
   */
  recipient?: string | undefined;
  /**
   * Message sender name
   */
  sender?: string | null | undefined;
  /**
   * The count of parts that message consists of
   */
  parts?: number | null | undefined;
  /**
   * Sending date and time (in ISO 8601 format)
   */
  sentDate?: Date | null | undefined;
  /**
   * Date and time of last status change (in ISO 8601 format)
   */
  statusDate?: Date | null | undefined;
  /**
   * Message status code
   */
  statusCode?: string | undefined;
  /**
   * Human redable description of message status
   */
  statusDescription?: string | undefined;
  /**
   * Did the message contain special characters, e.g. Polish diacritics?
   */
  unicode?: boolean | undefined;
  /**
   * Was the message sent with class 0 (FLASH)?
   */
  flash?: boolean | undefined;
  /**
   * The price of message (in PLN)
   */
  price?: number | undefined;
};

/** @internal */
export const Message$inboundSchema: z.ZodType<Message, z.ZodTypeDef, unknown> =
  z.object({
    id: z.nullable(z.number().int()).optional(),
    cid: z.nullable(z.string()).optional(),
    type: MessageType$inboundSchema.optional(),
    recipient: z.string().optional(),
    sender: z.nullable(z.string()).optional(),
    parts: z.nullable(z.number().int()).optional(),
    sent_date: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    status_date: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    status_code: z.string().optional(),
    status_description: z.string().optional(),
    unicode: z.boolean().optional(),
    flash: z.boolean().optional(),
    price: z.number().optional(),
  }).transform((v) => {
    return remap$(v, {
      "sent_date": "sentDate",
      "status_date": "statusDate",
      "status_code": "statusCode",
      "status_description": "statusDescription",
    });
  });

/** @internal */
export type Message$Outbound = {
  id?: number | null | undefined;
  cid?: string | null | undefined;
  type?: number | undefined;
  recipient?: string | undefined;
  sender?: string | null | undefined;
  parts?: number | null | undefined;
  sent_date?: string | null | undefined;
  status_date?: string | null | undefined;
  status_code?: string | undefined;
  status_description?: string | undefined;
  unicode?: boolean | undefined;
  flash?: boolean | undefined;
  price?: number | undefined;
};

/** @internal */
export const Message$outboundSchema: z.ZodType<
  Message$Outbound,
  z.ZodTypeDef,
  Message
> = z.object({
  id: z.nullable(z.number().int()).optional(),
  cid: z.nullable(z.string()).optional(),
  type: MessageType$outboundSchema.optional(),
  recipient: z.string().optional(),
  sender: z.nullable(z.string()).optional(),
  parts: z.nullable(z.number().int()).optional(),
  sentDate: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  statusDate: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  statusCode: z.string().optional(),
  statusDescription: z.string().optional(),
  unicode: z.boolean().optional(),
  flash: z.boolean().optional(),
  price: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    sentDate: "sent_date",
    statusDate: "status_date",
    statusCode: "status_code",
    statusDescription: "status_description",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Message$ {
  /** @deprecated use `Message$inboundSchema` instead. */
  export const inboundSchema = Message$inboundSchema;
  /** @deprecated use `Message$outboundSchema` instead. */
  export const outboundSchema = Message$outboundSchema;
  /** @deprecated use `Message$Outbound` instead. */
  export type Outbound = Message$Outbound;
}
