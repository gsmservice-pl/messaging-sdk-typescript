/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * An object with the properties of the message sender
 */
export type SenderInput = {
  /**
   * Message sender name
   */
  sender: string;
  /**
   * Description of the purpose of the sender name (required when adding new sender name)
   */
  description: string;
};

/** @internal */
export const SenderInput$inboundSchema: z.ZodType<
  SenderInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  sender: z.string(),
  description: z.string(),
});

/** @internal */
export type SenderInput$Outbound = {
  sender: string;
  description: string;
};

/** @internal */
export const SenderInput$outboundSchema: z.ZodType<
  SenderInput$Outbound,
  z.ZodTypeDef,
  SenderInput
> = z.object({
  sender: z.string(),
  description: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SenderInput$ {
  /** @deprecated use `SenderInput$inboundSchema` instead. */
  export const inboundSchema = SenderInput$inboundSchema;
  /** @deprecated use `SenderInput$outboundSchema` instead. */
  export const outboundSchema = SenderInput$outboundSchema;
  /** @deprecated use `SenderInput$Outbound` instead. */
  export type Outbound = SenderInput$Outbound;
}

export function senderInputToJSON(senderInput: SenderInput): string {
  return JSON.stringify(SenderInput$outboundSchema.parse(senderInput));
}

export function senderInputFromJSON(
  jsonString: string,
): SafeParseResult<SenderInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SenderInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SenderInput' from JSON`,
  );
}
