/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  PhoneNumberWithCid,
  PhoneNumberWithCid$inboundSchema,
  PhoneNumberWithCid$Outbound,
  PhoneNumberWithCid$outboundSchema,
} from "./phonenumberwithcid.js";
import {
  SmsType,
  SmsType$inboundSchema,
  SmsType$outboundSchema,
} from "./smstype.js";

/**
 * The recipient number or multiple recipients numbers of single message. To set one recipient, simply pass here a `string` with his phone number. To set multiple recipients, pass here a simple `array` of `string`. Optionally you can also set custom id (user identifier) for each message - pass `PhoneNumberWithCid` object (in case of single recipient) or `Array` of `PhoneNumberWithCid` (in case of multiple recipients).
 */
export type Recipients =
  | PhoneNumberWithCid
  | string
  | Array<string>
  | Array<PhoneNumberWithCid>;

/**
 * An object with a new SMS message properties
 */
export type SmsMessage = {
  /**
   * The recipient number or multiple recipients numbers of single message. To set one recipient, simply pass here a `string` with his phone number. To set multiple recipients, pass here a simple `array` of `string`. Optionally you can also set custom id (user identifier) for each message - pass `PhoneNumberWithCid` object (in case of single recipient) or `Array` of `PhoneNumberWithCid` (in case of multiple recipients).
   */
  recipients:
    | PhoneNumberWithCid
    | string
    | Array<string>
    | Array<PhoneNumberWithCid>;
  /**
   * SMS message content
   */
  message: string;
  /**
   * SMS sender name
   */
  sender?: string | undefined;
  /**
   * SMS type (SmsType.SmsPro -> SMS PRO, SmsType.SmsEco -> SMS ECO, SmsType.SmsTwoWay -> SMS 2WAY)
   */
  type?: SmsType | undefined;
  /**
   * Should the message be sent with special characters, e.g. Polish diacritics (if any)? If *false*, those characters will be automatically replaced with their equivalents. If *true* your message will be sent as **unicode** but the message will be able to consist of fewer characters.
   */
  unicode?: boolean | undefined;
  /**
   * Should the message to be sent with class 0 (FLASH)?
   */
  flash?: boolean | undefined;
  /**
   * Scheduled future date and time of sending the message (in ISO 8601 format). If missing or null - message will be sent immediately
   */
  date?: Date | null | undefined;
};

/** @internal */
export const Recipients$inboundSchema: z.ZodType<
  Recipients,
  z.ZodTypeDef,
  unknown
> = z.union([
  PhoneNumberWithCid$inboundSchema,
  z.string(),
  z.array(z.string()),
  z.array(PhoneNumberWithCid$inboundSchema),
]);

/** @internal */
export type Recipients$Outbound =
  | PhoneNumberWithCid$Outbound
  | string
  | Array<string>
  | Array<PhoneNumberWithCid$Outbound>;

/** @internal */
export const Recipients$outboundSchema: z.ZodType<
  Recipients$Outbound,
  z.ZodTypeDef,
  Recipients
> = z.union([
  PhoneNumberWithCid$outboundSchema,
  z.string(),
  z.array(z.string()),
  z.array(PhoneNumberWithCid$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Recipients$ {
  /** @deprecated use `Recipients$inboundSchema` instead. */
  export const inboundSchema = Recipients$inboundSchema;
  /** @deprecated use `Recipients$outboundSchema` instead. */
  export const outboundSchema = Recipients$outboundSchema;
  /** @deprecated use `Recipients$Outbound` instead. */
  export type Outbound = Recipients$Outbound;
}

/** @internal */
export const SmsMessage$inboundSchema: z.ZodType<
  SmsMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  recipients: z.union([
    PhoneNumberWithCid$inboundSchema,
    z.string(),
    z.array(z.string()),
    z.array(PhoneNumberWithCid$inboundSchema),
  ]),
  message: z.string(),
  sender: z.string().default("Bramka SMS"),
  type: SmsType$inboundSchema.default(1),
  unicode: z.boolean().default(false),
  flash: z.boolean().default(false),
  date: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).default(null),
});

/** @internal */
export type SmsMessage$Outbound = {
  recipients:
    | PhoneNumberWithCid$Outbound
    | string
    | Array<string>
    | Array<PhoneNumberWithCid$Outbound>;
  message: string;
  sender: string;
  type: number;
  unicode: boolean;
  flash: boolean;
  date: string | null;
};

/** @internal */
export const SmsMessage$outboundSchema: z.ZodType<
  SmsMessage$Outbound,
  z.ZodTypeDef,
  SmsMessage
> = z.object({
  recipients: z.union([
    PhoneNumberWithCid$outboundSchema,
    z.string(),
    z.array(z.string()),
    z.array(PhoneNumberWithCid$outboundSchema),
  ]),
  message: z.string(),
  sender: z.string().default("Bramka SMS"),
  type: SmsType$outboundSchema.default(1),
  unicode: z.boolean().default(false),
  flash: z.boolean().default(false),
  date: z.nullable(z.date().transform(v => v.toISOString())).default(null),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SmsMessage$ {
  /** @deprecated use `SmsMessage$inboundSchema` instead. */
  export const inboundSchema = SmsMessage$inboundSchema;
  /** @deprecated use `SmsMessage$outboundSchema` instead. */
  export const outboundSchema = SmsMessage$outboundSchema;
  /** @deprecated use `SmsMessage$Outbound` instead. */
  export type Outbound = SmsMessage$Outbound;
}
