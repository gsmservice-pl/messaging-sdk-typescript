/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PhoneNumberWithCid,
  PhoneNumberWithCid$inboundSchema,
  PhoneNumberWithCid$Outbound,
  PhoneNumberWithCid$outboundSchema,
} from "./phonenumberwithcid.js";

/**
 * The recipient number or multiple recipients numbers of single message. To set one recipient, simply pass here a `string` with his phone number. To set multiple recipients, pass here a simple `array` of `string`. Optionally you can also set custom id (user identifier) for each message - pass `PhoneNumberWithCid` object (in case of single recipient) or `Array` of `PhoneNumberWithCid` (in case of multiple recipients).
 */
export type Recipients =
  | PhoneNumberWithCid
  | string
  | Array<string>
  | Array<PhoneNumberWithCid>;

/**
 * Attachments for the message. You can pass here images, audio and video files bodies. To set one attachment please pass a `string` with attachment body encoded with `base64`. To set multiple attachments - pass an `array` of `strings` with attachment bodies encoded with `base64`. Max 3 attachments per message.
 */
export type Attachments = string | Array<string>;

/**
 * An object with a new MMS message properties
 */
export type MmsMessage = {
  /**
   * The recipient number or multiple recipients numbers of single message. To set one recipient, simply pass here a `string` with his phone number. To set multiple recipients, pass here a simple `array` of `string`. Optionally you can also set custom id (user identifier) for each message - pass `PhoneNumberWithCid` object (in case of single recipient) or `Array` of `PhoneNumberWithCid` (in case of multiple recipients).
   */
  recipients:
    | PhoneNumberWithCid
    | string
    | Array<string>
    | Array<PhoneNumberWithCid>;
  /**
   * MMS message subject
   */
  subject?: string | null | undefined;
  /**
   * MMS message content
   */
  message?: string | null | undefined;
  /**
   * Attachments for the message. You can pass here images, audio and video files bodies. To set one attachment please pass a `string` with attachment body encoded with `base64`. To set multiple attachments - pass an `array` of `strings` with attachment bodies encoded with `base64`. Max 3 attachments per message.
   */
  attachments?: string | Array<string> | undefined;
  /**
   * Scheduled future date and time of sending the message (in ISO 8601 format). If missing or null - message will be sent immediately
   */
  date?: Date | null | undefined;
};

/** @internal */
export const Recipients$inboundSchema: z.ZodType<
  Recipients,
  z.ZodTypeDef,
  unknown
> = z.union([
  PhoneNumberWithCid$inboundSchema,
  z.string(),
  z.array(z.string()),
  z.array(PhoneNumberWithCid$inboundSchema),
]);

/** @internal */
export type Recipients$Outbound =
  | PhoneNumberWithCid$Outbound
  | string
  | Array<string>
  | Array<PhoneNumberWithCid$Outbound>;

/** @internal */
export const Recipients$outboundSchema: z.ZodType<
  Recipients$Outbound,
  z.ZodTypeDef,
  Recipients
> = z.union([
  PhoneNumberWithCid$outboundSchema,
  z.string(),
  z.array(z.string()),
  z.array(PhoneNumberWithCid$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Recipients$ {
  /** @deprecated use `Recipients$inboundSchema` instead. */
  export const inboundSchema = Recipients$inboundSchema;
  /** @deprecated use `Recipients$outboundSchema` instead. */
  export const outboundSchema = Recipients$outboundSchema;
  /** @deprecated use `Recipients$Outbound` instead. */
  export type Outbound = Recipients$Outbound;
}

export function recipientsToJSON(recipients: Recipients): string {
  return JSON.stringify(Recipients$outboundSchema.parse(recipients));
}

export function recipientsFromJSON(
  jsonString: string,
): SafeParseResult<Recipients, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Recipients$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Recipients' from JSON`,
  );
}

/** @internal */
export const Attachments$inboundSchema: z.ZodType<
  Attachments,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type Attachments$Outbound = string | Array<string>;

/** @internal */
export const Attachments$outboundSchema: z.ZodType<
  Attachments$Outbound,
  z.ZodTypeDef,
  Attachments
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Attachments$ {
  /** @deprecated use `Attachments$inboundSchema` instead. */
  export const inboundSchema = Attachments$inboundSchema;
  /** @deprecated use `Attachments$outboundSchema` instead. */
  export const outboundSchema = Attachments$outboundSchema;
  /** @deprecated use `Attachments$Outbound` instead. */
  export type Outbound = Attachments$Outbound;
}

export function attachmentsToJSON(attachments: Attachments): string {
  return JSON.stringify(Attachments$outboundSchema.parse(attachments));
}

export function attachmentsFromJSON(
  jsonString: string,
): SafeParseResult<Attachments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Attachments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Attachments' from JSON`,
  );
}

/** @internal */
export const MmsMessage$inboundSchema: z.ZodType<
  MmsMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  recipients: z.union([
    PhoneNumberWithCid$inboundSchema,
    z.string(),
    z.array(z.string()),
    z.array(PhoneNumberWithCid$inboundSchema),
  ]),
  subject: z.nullable(z.string()).optional(),
  message: z.nullable(z.string()).optional(),
  attachments: z.union([z.string(), z.array(z.string())]).optional(),
  date: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).default(null),
});

/** @internal */
export type MmsMessage$Outbound = {
  recipients:
    | PhoneNumberWithCid$Outbound
    | string
    | Array<string>
    | Array<PhoneNumberWithCid$Outbound>;
  subject?: string | null | undefined;
  message?: string | null | undefined;
  attachments?: string | Array<string> | undefined;
  date: string | null;
};

/** @internal */
export const MmsMessage$outboundSchema: z.ZodType<
  MmsMessage$Outbound,
  z.ZodTypeDef,
  MmsMessage
> = z.object({
  recipients: z.union([
    PhoneNumberWithCid$outboundSchema,
    z.string(),
    z.array(z.string()),
    z.array(PhoneNumberWithCid$outboundSchema),
  ]),
  subject: z.nullable(z.string()).optional(),
  message: z.nullable(z.string()).optional(),
  attachments: z.union([z.string(), z.array(z.string())]).optional(),
  date: z.nullable(z.date().transform(v => v.toISOString())).default(null),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MmsMessage$ {
  /** @deprecated use `MmsMessage$inboundSchema` instead. */
  export const inboundSchema = MmsMessage$inboundSchema;
  /** @deprecated use `MmsMessage$outboundSchema` instead. */
  export const outboundSchema = MmsMessage$outboundSchema;
  /** @deprecated use `MmsMessage$Outbound` instead. */
  export type Outbound = MmsMessage$Outbound;
}

export function mmsMessageToJSON(mmsMessage: MmsMessage): string {
  return JSON.stringify(MmsMessage$outboundSchema.parse(mmsMessage));
}

export function mmsMessageFromJSON(
  jsonString: string,
): SafeParseResult<MmsMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MmsMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MmsMessage' from JSON`,
  );
}
