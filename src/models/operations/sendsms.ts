/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";

/**
 * To send a single SMS or messages with the same content to multiple recipients, pass as the method param a single `SmsMessage` object with the properties of this message. To send multiple messages with different content at the same time, pass as the method param an `array` of `SmsMessage` objects with the properties of each message.
 */
export type SendSmsRequestBody =
  | components.SmsMessage
  | Array<components.SmsMessage>;

export type SendSmsResponse = {
  headers: { [k: string]: Array<string> };
  result: Array<components.Message>;
};

/** @internal */
export const SendSmsRequestBody$inboundSchema: z.ZodType<
  SendSmsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.SmsMessage$inboundSchema,
  z.array(components.SmsMessage$inboundSchema),
]);

/** @internal */
export type SendSmsRequestBody$Outbound =
  | components.SmsMessage$Outbound
  | Array<components.SmsMessage$Outbound>;

/** @internal */
export const SendSmsRequestBody$outboundSchema: z.ZodType<
  SendSmsRequestBody$Outbound,
  z.ZodTypeDef,
  SendSmsRequestBody
> = z.union([
  components.SmsMessage$outboundSchema,
  z.array(components.SmsMessage$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SendSmsRequestBody$ {
  /** @deprecated use `SendSmsRequestBody$inboundSchema` instead. */
  export const inboundSchema = SendSmsRequestBody$inboundSchema;
  /** @deprecated use `SendSmsRequestBody$outboundSchema` instead. */
  export const outboundSchema = SendSmsRequestBody$outboundSchema;
  /** @deprecated use `SendSmsRequestBody$Outbound` instead. */
  export type Outbound = SendSmsRequestBody$Outbound;
}

/** @internal */
export const SendSmsResponse$inboundSchema: z.ZodType<
  SendSmsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.array(components.Message$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type SendSmsResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: Array<components.Message$Outbound>;
};

/** @internal */
export const SendSmsResponse$outboundSchema: z.ZodType<
  SendSmsResponse$Outbound,
  z.ZodTypeDef,
  SendSmsResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.array(components.Message$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SendSmsResponse$ {
  /** @deprecated use `SendSmsResponse$inboundSchema` instead. */
  export const inboundSchema = SendSmsResponse$inboundSchema;
  /** @deprecated use `SendSmsResponse$outboundSchema` instead. */
  export const outboundSchema = SendSmsResponse$outboundSchema;
  /** @deprecated use `SendSmsResponse$Outbound` instead. */
  export type Outbound = SendSmsResponse$Outbound;
}
