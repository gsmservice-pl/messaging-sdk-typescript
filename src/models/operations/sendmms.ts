/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * To send a single MMS or messages with the same content to multiple recipients, pass as the method param a single `MmsMessage` object with the properties of this message. To send multiple messages with different content at the same time, pass as the method param an `array` of `MmsMessage` objects with the properties of each message.
 */
export type SendMmsRequestBody =
  | components.MmsMessage
  | Array<components.MmsMessage>;

export type SendMmsResponse = {
  headers: { [k: string]: Array<string> };
  result: Array<components.Message>;
};

/** @internal */
export const SendMmsRequestBody$inboundSchema: z.ZodType<
  SendMmsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.MmsMessage$inboundSchema,
  z.array(components.MmsMessage$inboundSchema),
]);

/** @internal */
export type SendMmsRequestBody$Outbound =
  | components.MmsMessage$Outbound
  | Array<components.MmsMessage$Outbound>;

/** @internal */
export const SendMmsRequestBody$outboundSchema: z.ZodType<
  SendMmsRequestBody$Outbound,
  z.ZodTypeDef,
  SendMmsRequestBody
> = z.union([
  components.MmsMessage$outboundSchema,
  z.array(components.MmsMessage$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SendMmsRequestBody$ {
  /** @deprecated use `SendMmsRequestBody$inboundSchema` instead. */
  export const inboundSchema = SendMmsRequestBody$inboundSchema;
  /** @deprecated use `SendMmsRequestBody$outboundSchema` instead. */
  export const outboundSchema = SendMmsRequestBody$outboundSchema;
  /** @deprecated use `SendMmsRequestBody$Outbound` instead. */
  export type Outbound = SendMmsRequestBody$Outbound;
}

export function sendMmsRequestBodyToJSON(
  sendMmsRequestBody: SendMmsRequestBody,
): string {
  return JSON.stringify(
    SendMmsRequestBody$outboundSchema.parse(sendMmsRequestBody),
  );
}

export function sendMmsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<SendMmsRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SendMmsRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SendMmsRequestBody' from JSON`,
  );
}

/** @internal */
export const SendMmsResponse$inboundSchema: z.ZodType<
  SendMmsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.array(components.Message$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type SendMmsResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: Array<components.Message$Outbound>;
};

/** @internal */
export const SendMmsResponse$outboundSchema: z.ZodType<
  SendMmsResponse$Outbound,
  z.ZodTypeDef,
  SendMmsResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.array(components.Message$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SendMmsResponse$ {
  /** @deprecated use `SendMmsResponse$inboundSchema` instead. */
  export const inboundSchema = SendMmsResponse$inboundSchema;
  /** @deprecated use `SendMmsResponse$outboundSchema` instead. */
  export const outboundSchema = SendMmsResponse$outboundSchema;
  /** @deprecated use `SendMmsResponse$Outbound` instead. */
  export type Outbound = SendMmsResponse$Outbound;
}

export function sendMmsResponseToJSON(
  sendMmsResponse: SendMmsResponse,
): string {
  return JSON.stringify(SendMmsResponse$outboundSchema.parse(sendMmsResponse));
}

export function sendMmsResponseFromJSON(
  jsonString: string,
): SafeParseResult<SendMmsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SendMmsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SendMmsResponse' from JSON`,
  );
}
