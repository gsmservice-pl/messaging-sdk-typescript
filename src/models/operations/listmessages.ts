/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListMessagesRequest = {
  /**
   * Page number of results
   */
  page?: number | undefined;
  /**
   * Number of results on one page
   */
  limit?: number | undefined;
};

export type ListMessagesResponse = {
  headers: { [k: string]: Array<string> };
  result: Array<components.Message>;
};

/** @internal */
export const ListMessagesRequest$inboundSchema: z.ZodType<
  ListMessagesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  page: z.number().int().default(1),
  limit: z.number().int().default(10),
});

/** @internal */
export type ListMessagesRequest$Outbound = {
  page: number;
  limit: number;
};

/** @internal */
export const ListMessagesRequest$outboundSchema: z.ZodType<
  ListMessagesRequest$Outbound,
  z.ZodTypeDef,
  ListMessagesRequest
> = z.object({
  page: z.number().int().default(1),
  limit: z.number().int().default(10),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListMessagesRequest$ {
  /** @deprecated use `ListMessagesRequest$inboundSchema` instead. */
  export const inboundSchema = ListMessagesRequest$inboundSchema;
  /** @deprecated use `ListMessagesRequest$outboundSchema` instead. */
  export const outboundSchema = ListMessagesRequest$outboundSchema;
  /** @deprecated use `ListMessagesRequest$Outbound` instead. */
  export type Outbound = ListMessagesRequest$Outbound;
}

export function listMessagesRequestToJSON(
  listMessagesRequest: ListMessagesRequest,
): string {
  return JSON.stringify(
    ListMessagesRequest$outboundSchema.parse(listMessagesRequest),
  );
}

export function listMessagesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListMessagesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListMessagesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListMessagesRequest' from JSON`,
  );
}

/** @internal */
export const ListMessagesResponse$inboundSchema: z.ZodType<
  ListMessagesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.array(components.Message$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type ListMessagesResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: Array<components.Message$Outbound>;
};

/** @internal */
export const ListMessagesResponse$outboundSchema: z.ZodType<
  ListMessagesResponse$Outbound,
  z.ZodTypeDef,
  ListMessagesResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.array(components.Message$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListMessagesResponse$ {
  /** @deprecated use `ListMessagesResponse$inboundSchema` instead. */
  export const inboundSchema = ListMessagesResponse$inboundSchema;
  /** @deprecated use `ListMessagesResponse$outboundSchema` instead. */
  export const outboundSchema = ListMessagesResponse$outboundSchema;
  /** @deprecated use `ListMessagesResponse$Outbound` instead. */
  export type Outbound = ListMessagesResponse$Outbound;
}

export function listMessagesResponseToJSON(
  listMessagesResponse: ListMessagesResponse,
): string {
  return JSON.stringify(
    ListMessagesResponse$outboundSchema.parse(listMessagesResponse),
  );
}

export function listMessagesResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListMessagesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListMessagesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListMessagesResponse' from JSON`,
  );
}
