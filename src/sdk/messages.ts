/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { messagesCancelScheduled } from "../funcs/messagesCancelScheduled.js";
import { messagesGetByIds } from "../funcs/messagesGetByIds.js";
import { messagesList } from "../funcs/messagesList.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { Mms } from "./mms.js";
import { Sms } from "./sms.js";

export class Messages extends ClientSDK {
  private _mms?: Mms;
  get mms(): Mms {
    return (this._mms ??= new Mms(this._options));
  }

  private _sms?: Sms;
  get sms(): Sms {
    return (this._sms ??= new Sms(this._options));
  }

  /**
   * Get the messages details and status by IDs
   *
   * @remarks
   * Check the current status and details of one or more messages using their `ids`. You have to pass a `GetMessagesRequest` object with `ids` property, containing an `array` with unique message *IDs* which details you want to fetch. This method will accept maximum 50 identifiers in one call.
   *
   * As a successful result a `GetMessagesResponse` object will be returned containing `result` property with an `array` of `Message` objects, each object per single found message. `GetMessagesResponse` object will also contain `headers` array property where you can find `X-Success-Count` (a count of messages which were found and returned correctly) and `X-Error-Count` (count of messages which were not found) elements.
   */
  async getByIds(
    request: operations.GetMessagesRequest,
    options?: RequestOptions,
  ): Promise<operations.GetMessagesResponse> {
    return unwrapAsync(messagesGetByIds(
      this,
      request,
      options,
    ));
  }

  /**
   * Cancel a scheduled messages
   *
   * @remarks
   * Cancel messages using their `ids` which were scheduled to be sent at a specific time. You have to pass a `CancelMessagesRequest` object containing as `ids` property an `array` of the unique message IDs, which were returned after sending a message. This method will accept maximum 50 identifiers in one call. You can cancel only messages with *SCHEDULED* status.
   *
   * As a successful result a `CancelMessagesResponse` object will be returned, with `result` property containing array of `CancelledMessage` object. The `status` property of each `CancelledMessage` object will contain a status code of operation - `204` if a particular message was cancelled successfully and other code if an error occured.
   *
   * `CancelMessagesResponse` object will also contain `headers` array property where you can find `X-Success-Count` (a count of messages which were cancelled successfully), `X-Error-Count` (count of messages which were not cancelled) and `X-Sandbox` (if a request was made in Sandbox or Production system) elements.
   */
  async cancelScheduled(
    request: operations.CancelMessagesRequest,
    options?: RequestOptions,
  ): Promise<operations.CancelMessagesResponse> {
    return unwrapAsync(messagesCancelScheduled(
      this,
      request,
      options,
    ));
  }

  /**
   * Lists the history of sent messages
   *
   * @remarks
   * Get the details and current status of all of sent messages from your account message history. This method supports pagination so you have to pass a `ListMessagesRequest` with `page` property (number of page with messages which you want to access) and a `limit` value (max of messages per page). Messages are fetched from the latest one. This method will accept maximum value of **50** as `limit` parameter value.
   *
   * As a successful result a `ListMessagesResponse` object will be returned containing `result` property with an `array` of `Message` objects, each object per single message. `ListMessagesResponse` will also contain `headers` array property where you can find `X-Total-Results` (a total count of all messages which are available in history on your account), `X-Total-Pages` (a total number of all pages with results), `X-Current-Page` (A current page number) and `X-Limit` (messages count per single page) elements.
   */
  async list(
    request: operations.ListMessagesRequest,
    options?: RequestOptions,
  ): Promise<operations.ListMessagesResponse> {
    return unwrapAsync(messagesList(
      this,
      request,
      options,
    ));
  }
}
