/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { outgoingSmsGetPrice } from "../funcs/outgoingSmsGetPrice.js";
import { outgoingSmsSend } from "../funcs/outgoingSmsSend.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Sms extends ClientSDK {
  /**
   * Check the price of SMS Messages
   *
   * @remarks
   * Check the price of single or multiple SMS messages at the same time before sending them. You can pass a single `SmsMessage` object (for single message) or `array` of `SmsMessage` objects (for multiple messages). Each `SmsMessage` object has several properties, describing message parameters such as recipient phone number, content of the message, type, etc.
   * The method will accept maximum **100** messages in one call.
   *
   * As a successful result a `GetSmsPriceResponse` object will be returned with `result` property containing `array` of `Price` objects, one object per each single message. You should check the `error` property of each `Price` object to make sure which were priced successfully and which finished with an error. Successfully priced messages will have `null` value of `error` property.
   *
   * `GetSmsPriceResponse` object will include also `headers` array with `X-Success-Count` (a count of messages which were processed successfully) and `X-Error-Count` (count of messages which were rejected) elements.
   */
  async getPrice(
    request: operations.GetSmsPriceRequestBody,
    options?: RequestOptions,
  ): Promise<operations.GetSmsPriceResponse> {
    return unwrapAsync(outgoingSmsGetPrice(
      this,
      request,
      options,
    ));
  }

  /**
   * Send SMS Messages
   *
   * @remarks
   * Send single or multiple SMS messages at the same time. You can pass as a parameter `SmsMessage` object (for single message) or `array` of `SmsMessage` objects (for multiple messages). Each `SmsMessage` object has several properties, describing message parameters such recipient phone number, content of the message, type or scheduled sending date, etc. This method will accept maximum **100** messages in one call.
   *
   * As a successful result a `SendSmsResponse` object will be returned with `result` property containing array of `Message` objects, one object per each single message. You should check the `statusCode` property of each `Message` object to make sure which were accepted by gateway (queued) and which were rejected. In case of rejection, `statusDescription` property will include a reason.
   *
   * `SendSmsResponse` will also include `headers` array with `X-Success-Count` (a count of messages which were processed successfully), `X-Error-Count` (count of messages which were rejected) and `X-Sandbox` (if a request was made in Sandbox or Production system) elements.
   */
  async send(
    request: operations.SendSmsRequestBody,
    options?: RequestOptions,
  ): Promise<operations.SendSmsResponse> {
    return unwrapAsync(outgoingSmsSend(
      this,
      request,
      options,
    ));
  }
}
